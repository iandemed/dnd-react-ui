{"version":3,"sources":["StatBlock.js","Speed.js","ConditionImmunities.js","DamageImmunities.js","Proficiencies.js","Senses.js","SpecialAbilities.js","CharacterSheet.js","MonsterAccordion.js","App.js","serviceWorker.js","index.js"],"names":["StatBlock","str","dex","con","int","wis","cha","abilityModifier","ability","mod","Math","floor","className","Speed","types","values","monsterSpeed","i","length","prepareSpeed","ConditionImmunities","conditions","monsterImmunities","forEach","condition","name","slice","prepareConditionImmunities","DamageImmunities","damage","includes","prepareDamageImmunities","Proficiencies","type","typeProficiencies","proficiencies","filter","obj","proficiency","monsterProficiencies","value","replace","split","prepareProficencies","Senses","monsterSenses","prepareSenses","SpecialAbilities","abilities","map","index","key","desc","CharacterSheet","useState","monster","setMonster","isLoaded","setLoaded","useEffect","fetch","then","res","json","monsterData","size","subtype","alignment","Object","keys","speed","strength","dexterity","constitution","intelligence","wisdom","charisma","senses","hasOwnProperty","MonsterAccorion","isActive","setActive","onClick","prepareCharacterSheet","App","monsterNames","setMonsterName","setIsLoaded","results","MonsterAccordion","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89822328.chunk.js","sourcesContent":["import React from 'react'\nimport './CharacterSheet.css'\n\nconst StatBlock = ({str, dex, con, int, wis, cha}) => {\n\n    const abilityModifier = (ability) => {\n        let mod = Math.floor((ability-10)/2)\n    \n        return mod > 0 ? `+${mod}` : `${mod}`\n    }\n\n    return(\n\n        <div className = \"StatBlock maroon\">\n            <h2>STR</h2>\n            <h2>DEX</h2>\n            <h2>CON</h2>\n            <h2>INT</h2>\n            <h2>WIS</h2>\n            <h2>CHA</h2>\n            \n            <p>{str}</p>\n            <p>{dex}</p>\n            <p>{con}</p>\n            <p>{int}</p>\n            <p>{wis}</p>\n            <p>{cha}</p>\n            \n            <p>{abilityModifier(str)}</p>\n            <p>{abilityModifier(dex)}</p>\n            <p>{abilityModifier(con)}</p>\n            <p>{abilityModifier(int)}</p>\n            <p>{abilityModifier(wis)}</p>\n            <p>{abilityModifier(cha)}</p>\n            \n        </div>\n\n    )\n}\n\nexport default StatBlock","import React from 'react'\nimport './CharacterSheet.css'\n\n\nconst prepareSpeed = (types, values) => {\n\n  let monsterSpeed = \"\";\n  for (let i = 0; i < types.length; i++){\n    if (types[i] === \"walk\"){\n      monsterSpeed += `${values[i]}`;\n    } else {\n      monsterSpeed += `, ${types[i]} ${values[i]}`;\n    }\n  }\n  return monsterSpeed;\n};\n\nconst Speed = ({types, values}) => {\n  return(\n    <div>\n      <strong>Speed:</strong> {prepareSpeed(types, values)}\n    </div>\n  );\n};\n\n\nexport default Speed;","import React from 'react'\nimport './CharacterSheet.css'\n\n\nconst prepareConditionImmunities = (conditions) => {\n  let monsterImmunities = \"\";\n  conditions.forEach((condition) =>{\n      monsterImmunities += `${condition.name}, `\n  });\n  \n  return monsterImmunities.slice(0,-2);\n};\n\nconst ConditionImmunities = ({conditions}) => {\n  if (conditions.length === 0){\n      return null;\n  } else {\n    return(\n      <div className = {`maroon`}>\n          <strong>Condition Immunities:</strong> {prepareConditionImmunities(conditions)}\n      </div>\n    );\n  }\n};\n\nexport default ConditionImmunities;","import React from 'react'\nimport './CharacterSheet.css'\n\n\n\nconst DamageImmunities = ({damage}) => {\n\n    function prepareDamageImmunities(damage){\n\n        let monsterImmunities = \"\"\n\n        for (let i = 0; i < damage.length; i++){\n\n            if(i === 0){\n                monsterImmunities += `${damage[i]}`\n            } else if(damage[i].includes(',')){\n                monsterImmunities += `; ${damage[i]}`\n            } else{\n                monsterImmunities += `, ${damage[i]}`\n            }\n        }\n        \n        return monsterImmunities\n    \n    }\n\n    if (damage.length === 0){\n        return(null)\n    }\n    else {\n        return(\n\n        <div className = {`maroon`}>\n           <strong>Damage Immunities:</strong> {prepareDamageImmunities(damage)}\n        </div>\n\n        )\n    }\n}\n\n\nexport default DamageImmunities","import React from 'react'\nimport './CharacterSheet.css'\n\n\nconst prepareProficencies = (type, proficiencies) => {\n  let monsterProficiencies = \"\";\n  for(let i = 0;  i < proficiencies.length; i++){\n    const proficiency = proficiencies[i].proficiency;\n    const value = proficiencies[i].value;\n    monsterProficiencies += `${proficiency.name.replace(type,'')} +${value} `;\n  }\n  return monsterProficiencies.split(0, -1);\n}\n\nconst Proficiencies = ({type, proficiencies}) => {\n  // Proficiencies are an array of objects that contain two properties: proficiency and value\n  // see the README for an example of the structure of the proficiency object\n  let typeProficiencies = proficiencies.filter( obj => {\n    const proficiency = obj.proficiency;\n    return proficiency.name.includes(type);\n  })\n  if ( typeProficiencies.length === 0){\n    return null;\n  }\n  else {\n    return(\n    <div>\n        <strong>{type}</strong> {prepareProficencies(type, typeProficiencies)}\n    </div>\n    );\n  }\n}\n\n\nexport default Proficiencies","import React from 'react'\nimport './CharacterSheet.css'\n\nconst prepareSenses = (types, values) => {\n\n  let monsterSenses = \"\"\n  for (let i = 0; i < types.length; i++){\n    if (types[i] === \"passive_perception\") {\n      monsterSenses += `passive Perception ${values[i]},`;\n    } else {\n      monsterSenses += `${types[i]} ${values[i]}, `;\n    }\n  }\n  return monsterSenses.slice(0,-1);\n}\n\n\nconst Senses = ({types, values}) => {\n  if (types.length === 0){\n    return null;\n  }\n  else {\n    return(\n      <div>\n        <strong>Senses:</strong> {prepareSenses(types, values)}\n      </div>\n    );\n  }\n}\n\n\nexport default Senses;","import React from 'react'\nimport './CharacterSheet.css'\n\nconst SpecialAbilities = ({abilities}) => {\n  if (abilities === null){\n    return(null)\n  }\n  else {\n    return(\n      <div className=\"Special-abilities\">\n      { abilities.map((ability, index) => { \n        return(\n          <div \n            className=\"ability\"\n            key={index}\n          >\n            <p>\n              <strong>{ability.name}</strong> \n            </p>\n            <p>\n              {ability.desc}\n            </p>\n          </div>\n        );\n      })}\n      </div>\n    )\n  }\n}\n\n\nexport default SpecialAbilities","import React, {useState, useEffect} from 'react'\nimport './CharacterSheet.css'\nimport StatBlock from './StatBlock.js'\nimport Speed from './Speed.js'\nimport ConditionImmunities from './ConditionImmunities'\nimport DamageImmunities from './DamageImmunities'\nimport Proficiencies from './Proficiencies'\nimport Senses from './Senses'\nimport SpecialAbilities from \"./SpecialAbilities\"\n\nconst CharacterSheet = ({index}) => {\n\n  const [monster, setMonster] = useState({});\n  const [isLoaded, setLoaded] = useState(false);\n\n  /* Add a useEffect hook with an empty dependency array to prevent infinite callbacks */\n  useEffect(() => {\n    fetch(\"https://www.dnd5eapi.co/api/monsters/\" + index)\n    .then(res=> res.json())\n    .then(monsterData => {\n      setMonster(monsterData)\n      setLoaded(true)\n    })\n  }, [index]);\n  if (isLoaded) {\n\n  return (\n    <div>\n      <div className='typeline'>\n        <em>{monster.size} {monster.type} {(monster.subtype) ? monster.subtype : ''}, {monster.alignment}</em>\n      </div>\n      <div className = \"primary-stats maroon\">\n        <div>\n          <strong>Armor Class</strong> {monster[\"armor_class\"]}\n        </div>\n        <div>\n          <strong>Hit Points</strong> {monster[\"hit_points\"]} ({monster[\"hit_dice\"]})\n        </div>\n        <Speed types = {Object.keys(monster.speed)} values = {Object.values(monster.speed)} />\n      </div> \n      <StatBlock \n        str={monster.strength}\n        dex={monster.dexterity}\n        con={monster.constitution}\n        int={monster.intelligence}\n        wis={monster.wisdom}\n        cha={monster.charisma}\n      />\n      <div className = \"secondary-stats maroon\">\n        <Proficiencies\n          type = \"Skill\"\n          proficiencies = {monster['proficiencies']}\n        />\n        <Proficiencies\n          type = \"Saving Throw:\"\n          proficiencies = {monster['proficiencies']}\n        />\n        <DamageImmunities damage = {monster['damage_immunities']}\n        />\n        <ConditionImmunities conditions = {monster['condition_immunities']}/>\n        <Senses\n          types = {Object.keys(monster.senses)}\n          values = {Object.values(monster.senses)}\n        />\n      </div>\n      <SpecialAbilities abilities = {monster.hasOwnProperty('special_abilities') ? monster['special_abilities'] : null}/>\n    </div>\n  );\n  } else{\n      return null;\n  }\n};\n\nexport default CharacterSheet;","import React, {useState} from 'react'\nimport './App.css';\nimport CharacterSheet from './CharacterSheet.js';\n\nconst prepareCharacterSheet = (isActive, index) => {\n\n  if(isActive){\n    return(<CharacterSheet index={index}/>);\n  } else{\n    return null;\n  }\n}\n\nconst MonsterAccorion = ({name, index}) => {\n\n  const [isActive, setActive] = useState(false);\n  return(\n    <div key={index}>\n      <div \n        className ={`accordion-header ${isActive ? \"active\" : \"\"}`}\n        onClick = {() => {setActive(!isActive)}}\n      >\n        <h1>{name}</h1>\n      </div>\n      <div className = {`accordion-header ${isActive ? \"active\" : \"\"}`}>\n        {prepareCharacterSheet(isActive, index)}\n      </div>\n    </div>\n  );\n}\n\nexport default MonsterAccorion;\n\n","import React, {useState, useEffect} from 'react'\nimport './App.css';\nimport MonsterAccordion from './MonsterAccordion.js';\n\nfunction App() {\n\n  const [monsterNames, setMonsterName] = useState([])\n  const [isLoaded, setIsLoaded] = useState(false)\n\n\n  useEffect(() => {\n    fetch(\"https://www.dnd5eapi.co/api/monsters/\")\n    .then(res=> res.json())\n    .then(monsterData => {\n      setMonsterName(monsterData.results)\n      setIsLoaded(true)\n    })\n  }, [])\n\n  /* The page will begin trying to render before we have loaded in all of our monsters,\n  therefore if we were to try and reference anything created in the useEffect field we would\n  cause the program to craash since it would be undefined on the first render */\n  if(!isLoaded){\n    return(\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>5th Edition SRD Monster Character Sheets</h1>\n      </header>\n\n      Loading...\n\n    </div>\n    )\n  }\n  else{\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>5th Edition SRD Monster Character Sheets</h1>\n        </header>\n        <div className=\"container\">\n          {\n              monsterNames.map((monster) => {\n                return(\n                  <MonsterAccordion name={monster.name} index={monster.index}/> \n                )\n                })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}